{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsBuffer)(a);\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\nexports.keccak = keccak;\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;","map":{"version":3,"names":["keccak_1","require","createHash","externals_1","bytes_1","helpers_1","keccak","a","bits","assertIsBuffer","keccak224","keccak256","keccak384","keccak512","Error","concat","exports","keccakFromString","assertIsString","buf","Buffer","from","keccakFromHexString","assertIsHexString","toBuffer","keccakFromArray","assertIsArray","_sha256","update","digest","sha256","sha256FromString","sha256FromArray","_ripemd160","padded","hash","setLengthLeft","ripemd160","ripemd160FromString","ripemd160FromArray","rlphash","rlp","encode"],"sources":["../src/hash.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}