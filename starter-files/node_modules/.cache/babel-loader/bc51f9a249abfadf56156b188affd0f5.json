{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\nvar _elementaryName = function (name) {\n  /*jshint maxcomplexity:false */\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3);\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4);\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5);\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6);\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n};\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n  var typesize = /^\\D+(\\d+).*$/.exec(type);\n  return typesize ? parseInt(typesize[1], 10) : null;\n};\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n  var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n  return arraySize ? parseInt(arraySize[1], 10) : null;\n};\nvar _parseNumber = function (arg) {\n  var type = typeof arg;\n  if (type === 'string') {\n    if (utils.isHexStrict(arg)) {\n      return new BN(arg.replace(/0x/i, ''), 16);\n    } else {\n      return new BN(arg, 10);\n    }\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (utils.isBigNumber(arg)) {\n    return new BN(arg.toString(10));\n  } else if (utils.isBN(arg)) {\n    return arg;\n  } else {\n    throw new Error(arg + ' is not a number');\n  }\n};\nvar _solidityPack = function (type, value, arraySize) {\n  /*jshint maxcomplexity:false */\n  var size, num;\n  type = _elementaryName(type);\n  if (type === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new Error('Invalid bytes characters ' + value.length);\n    }\n    return value;\n  } else if (type === 'string') {\n    return utils.utf8ToHex(value);\n  } else if (type === 'bool') {\n    return value ? '01' : '00';\n  } else if (type.startsWith('address')) {\n    if (arraySize) {\n      size = 64;\n    } else {\n      size = 40;\n    }\n    if (!utils.isAddress(value)) {\n      throw new Error(value + ' is not a valid address, or the checksum is invalid.');\n    }\n    return utils.leftPad(value.toLowerCase(), size);\n  }\n  size = _parseTypeN(type);\n  if (type.startsWith('bytes')) {\n    if (!size) {\n      throw new Error('bytes[] not yet supported in solidity');\n    }\n    // must be 32 byte slices when in an array\n    if (arraySize) {\n      size = 32;\n    }\n    if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new Error('Invalid bytes' + size + ' for ' + value);\n    }\n    return utils.rightPad(value, size * 2);\n  } else if (type.startsWith('uint')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid uint' + size + ' size');\n    }\n    num = _parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n    if (num.lt(new BN(0))) {\n      throw new Error('Supplied uint ' + num.toString() + ' is negative');\n    }\n    return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n  } else if (type.startsWith('int')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid int' + size + ' size');\n    }\n    num = _parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n    if (num.lt(new BN(0))) {\n      return num.toTwos(size).toString('hex');\n    } else {\n      return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n    }\n  } else {\n    // FIXME: support all other types\n    throw new Error('Unsupported or invalid type: ' + type);\n  }\n};\nvar _processSolidityEncodePackedArgs = function (arg) {\n  /*jshint maxcomplexity:false */\n  if (Array.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n  var type,\n    value = '';\n  var hexArg, arraySize;\n  // if type is given\n  if (!!arg && typeof arg === 'object' && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n    type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n    value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n    // otherwise try to guess the type\n  } else {\n    type = utils.toHex(arg, true);\n    value = utils.toHex(arg);\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = new BN(value);\n  }\n  // get the array size\n  if (Array.isArray(value)) {\n    arraySize = _parseTypeNArray(type);\n    if (arraySize && value.length !== arraySize) {\n      throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));\n    } else {\n      arraySize = value.length;\n    }\n  }\n  if (Array.isArray(value)) {\n    hexArg = value.map(function (val) {\n      return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n    });\n    return hexArg.join('');\n  } else {\n    hexArg = _solidityPack(type, value, arraySize);\n    return hexArg.toString('hex').replace('0x', '');\n  }\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n  /*jshint maxcomplexity:false */\n  var args = Array.prototype.slice.call(arguments);\n  var hexArgs = args.map(_processSolidityEncodePackedArgs);\n  // console.log(args, hexArgs);\n  // console.log('0x'+ hexArgs.join(''));\n  return utils.sha3('0x' + hexArgs.join(''));\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\nvar soliditySha3Raw = function () {\n  return utils.sha3Raw('0x' + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(''));\n};\n/**\n * Encode packed args to hex\n *\n * @method encodePacked\n * @return {String} the hex encoded arguments\n */\nvar encodePacked = function () {\n  /*jshint maxcomplexity:false */\n  var args = Array.prototype.slice.call(arguments);\n  var hexArgs = args.map(_processSolidityEncodePackedArgs);\n  return '0x' + hexArgs.join('').toLowerCase();\n};\nmodule.exports = {\n  soliditySha3: soliditySha3,\n  soliditySha3Raw: soliditySha3Raw,\n  encodePacked: encodePacked\n};","map":{"version":3,"names":["BN","require","utils","_elementaryName","name","startsWith","slice","_parseTypeN","type","typesize","exec","parseInt","_parseTypeNArray","arraySize","_parseNumber","arg","isHexStrict","replace","isBigNumber","toString","isBN","Error","_solidityPack","value","size","num","length","utf8ToHex","isAddress","leftPad","toLowerCase","rightPad","bitLength","lt","toTwos","_processSolidityEncodePackedArgs","Array","isArray","hexArg","hasOwnProperty","t","v","toHex","test","JSON","stringify","map","val","join","soliditySha3","args","prototype","call","arguments","hexArgs","sha3","soliditySha3Raw","sha3Raw","encodePacked","module","exports"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/web3-utils/lib/soliditySha3.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    }\n    else if (name === 'int') {\n        return 'int256';\n    }\n    else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    }\n    else if (name === 'uint') {\n        return 'uint256';\n    }\n    else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    }\n    else if (name === 'fixed') {\n        return 'fixed128x128';\n    }\n    else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    }\n    else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i, ''), 16);\n        }\n        else {\n            return new BN(arg, 10);\n        }\n    }\n    else if (type === 'number') {\n        return new BN(arg);\n    }\n    else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    }\n    else if (utils.isBN(arg)) {\n        return arg;\n    }\n    else {\n        throw new Error(arg + ' is not a number');\n    }\n};\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n    var size, num;\n    type = _elementaryName(type);\n    if (type === 'bytes') {\n        if (value.replace(/^0x/i, '').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters ' + value.length);\n        }\n        return value;\n    }\n    else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    }\n    else if (type === 'bool') {\n        return value ? '01' : '00';\n    }\n    else if (type.startsWith('address')) {\n        if (arraySize) {\n            size = 64;\n        }\n        else {\n            size = 40;\n        }\n        if (!utils.isAddress(value)) {\n            throw new Error(value + ' is not a valid address, or the checksum is invalid.');\n        }\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n    size = _parseTypeN(type);\n    if (type.startsWith('bytes')) {\n        if (!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n        // must be 32 byte slices when in an array\n        if (arraySize) {\n            size = 32;\n        }\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n            throw new Error('Invalid bytes' + size + ' for ' + value);\n        }\n        return utils.rightPad(value, size * 2);\n    }\n    else if (type.startsWith('uint')) {\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint' + size + ' size');\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            throw new Error('Supplied uint ' + num.toString() + ' is negative');\n        }\n        return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n    }\n    else if (type.startsWith('int')) {\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int' + size + ' size');\n        }\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n        if (num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        }\n        else {\n            return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n        }\n    }\n    else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\nvar _processSolidityEncodePackedArgs = function (arg) {\n    /*jshint maxcomplexity:false */\n    if (Array.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n    var type, value = '';\n    var hexArg, arraySize;\n    // if type is given\n    if (!!arg && typeof arg === 'object' && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n        // otherwise try to guess the type\n    }\n    else {\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n    if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n    // get the array size\n    if (Array.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if (arraySize && value.length !== arraySize) {\n            throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));\n        }\n        else {\n            arraySize = value.length;\n        }\n    }\n    if (Array.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n        });\n        return hexArg.join('');\n    }\n    else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x', '');\n    }\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n    var args = Array.prototype.slice.call(arguments);\n    var hexArgs = args.map(_processSolidityEncodePackedArgs);\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n    return utils.sha3('0x' + hexArgs.join(''));\n};\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\nvar soliditySha3Raw = function () {\n    return utils.sha3Raw('0x' + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(''));\n};\n/**\n * Encode packed args to hex\n *\n * @method encodePacked\n * @return {String} the hex encoded arguments\n */\nvar encodePacked = function () {\n    /*jshint maxcomplexity:false */\n    var args = Array.prototype.slice.call(arguments);\n    var hexArgs = args.map(_processSolidityEncodePackedArgs);\n    return '0x' + hexArgs.join('').toLowerCase();\n};\nmodule.exports = {\n    soliditySha3: soliditySha3,\n    soliditySha3Raw: soliditySha3Raw,\n    encodePacked: encodePacked\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}