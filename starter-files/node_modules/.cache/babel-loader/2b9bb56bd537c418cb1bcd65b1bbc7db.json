{"ast":null,"code":"var BN = require('bn.js');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n    stringArg = stringArg === '' ? '0' : stringArg;\n    if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && !arg.pop && !arg.push) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n};","map":{"version":3,"names":["BN","require","stripHexPrefix","module","exports","numberToBN","arg","multiplier","formattedString","String","toLowerCase","trim","isHexPrefixed","substr","stringArg","slice","match","mul","toString","pop","push","dividedToIntegerBy","Error","JSON","stringify"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/number-to-bn/src/index.js"],"sourcesContent":["var BN = require('bn.js');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */\nmodule.exports = function numberToBN(arg) {\n  if (typeof arg === 'string' || typeof arg === 'number') {\n    var multiplier = new BN(1); // eslint-disable-line\n    var formattedString = String(arg).toLowerCase().trim();\n    var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';\n    var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n    if (stringArg.substr(0, 1) === '-') {\n      stringArg = stripHexPrefix(stringArg.slice(1));\n      multiplier = new BN(-1, 10);\n    }\n    stringArg = stringArg === '' ? '0' : stringArg;\n\n    if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))\n      || stringArg.match(/^[a-fA-F]+$/)\n      || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {\n      return new BN(stringArg, 16).mul(multiplier);\n    }\n\n    if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {\n      return new BN(stringArg, 10).mul(multiplier);\n    }\n  } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {\n    if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n      return new BN(arg.toString(10), 10);\n    }\n  }\n\n  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');\n}\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,OAAO,CAAC;AACzB,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAACC,GAAG,EAAE;EACxC,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACtD,IAAIC,UAAU,GAAG,IAAIP,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAIQ,eAAe,GAAGC,MAAM,CAACH,GAAG,CAAC,CAACI,WAAW,EAAE,CAACC,IAAI,EAAE;IACtD,IAAIC,aAAa,GAAGJ,eAAe,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAIL,eAAe,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK;IACnG,IAAIC,SAAS,GAAGZ,cAAc,CAACM,eAAe,CAAC,CAAC,CAAC;IACjD,IAAIM,SAAS,CAACD,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;MAClCC,SAAS,GAAGZ,cAAc,CAACY,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9CR,UAAU,GAAG,IAAIP,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC7B;IACAc,SAAS,GAAGA,SAAS,KAAK,EAAE,GAAG,GAAG,GAAGA,SAAS;IAE9C,IAAK,CAACA,SAAS,CAACE,KAAK,CAAC,YAAY,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,gBAAgB,CAAC,IACnEF,SAAS,CAACE,KAAK,CAAC,aAAa,CAAC,IAC7BJ,aAAa,KAAK,IAAI,IAAIE,SAAS,CAACE,KAAK,CAAC,gBAAgB,CAAE,EAAE;MAClE,OAAO,IAAIhB,EAAE,CAACc,SAAS,EAAE,EAAE,CAAC,CAACG,GAAG,CAACV,UAAU,CAAC;IAC9C;IAEA,IAAI,CAACO,SAAS,CAACE,KAAK,CAAC,YAAY,CAAC,IAAIF,SAAS,KAAK,EAAE,KAAKF,aAAa,KAAK,KAAK,EAAE;MAClF,OAAO,IAAIZ,EAAE,CAACc,SAAS,EAAE,EAAE,CAAC,CAACG,GAAG,CAACV,UAAU,CAAC;IAC9C;EACF,CAAC,MAAM,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACY,QAAQ,IAAK,CAACZ,GAAG,CAACa,GAAG,IAAI,CAACb,GAAG,CAACc,IAAK,EAAE;IAC7E,IAAId,GAAG,CAACY,QAAQ,CAAC,EAAE,CAAC,CAACF,KAAK,CAAC,YAAY,CAAC,KAAKV,GAAG,CAACW,GAAG,IAAIX,GAAG,CAACe,kBAAkB,CAAC,EAAE;MAC/E,OAAO,IAAIrB,EAAE,CAACM,GAAG,CAACY,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IACrC;EACF;EAEA,MAAM,IAAII,KAAK,CAAC,yCAAyC,GAAGC,IAAI,CAACC,SAAS,CAAClB,GAAG,CAAC,GAAG,oJAAoJ,CAAC;AACzO,CAAC"},"metadata":{},"sourceType":"script"}