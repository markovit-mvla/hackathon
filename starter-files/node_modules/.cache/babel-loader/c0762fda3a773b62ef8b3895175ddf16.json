{"ast":null,"code":"'use strict';\n\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n\n// complete ethereum unit map\nvar unitMap = {\n  'noether': '0',\n  // eslint-disable-line\n  'wei': '1',\n  // eslint-disable-line\n  'kwei': '1000',\n  // eslint-disable-line\n  'Kwei': '1000',\n  // eslint-disable-line\n  'babbage': '1000',\n  // eslint-disable-line\n  'femtoether': '1000',\n  // eslint-disable-line\n  'mwei': '1000000',\n  // eslint-disable-line\n  'Mwei': '1000000',\n  // eslint-disable-line\n  'lovelace': '1000000',\n  // eslint-disable-line\n  'picoether': '1000000',\n  // eslint-disable-line\n  'gwei': '1000000000',\n  // eslint-disable-line\n  'Gwei': '1000000000',\n  // eslint-disable-line\n  'shannon': '1000000000',\n  // eslint-disable-line\n  'nanoether': '1000000000',\n  // eslint-disable-line\n  'nano': '1000000000',\n  // eslint-disable-line\n  'szabo': '1000000000000',\n  // eslint-disable-line\n  'microether': '1000000000000',\n  // eslint-disable-line\n  'micro': '1000000000000',\n  // eslint-disable-line\n  'finney': '1000000000000000',\n  // eslint-disable-line\n  'milliether': '1000000000000000',\n  // eslint-disable-line\n  'milli': '1000000000000000',\n  // eslint-disable-line\n  'ether': '1000000000000000000',\n  // eslint-disable-line\n  'kether': '1000000000000000000000',\n  // eslint-disable-line\n  'grand': '1000000000000000000000',\n  // eslint-disable-line\n  'mether': '1000000000000000000000000',\n  // eslint-disable-line\n  'gether': '1000000000000000000000000000',\n  // eslint-disable-line\n  'tether': '1000000000000000000000000000000'\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n  return new BN(unitValue, 10);\n}\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n  var negative = wei.lt(zero); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n  return value;\n}\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n\n  // Is it negative?\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n  if (negative) {\n    ether = ether.substring(1);\n  }\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  }\n\n  // Split it into a whole and fractional part\n  var comps = ether.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n  var whole = comps[0],\n    fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n  return new BN(wei.toString(10), 10);\n}\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};","map":{"version":3,"names":["BN","require","numberToBN","zero","negative1","unitMap","getValueOfUnit","unitInput","unit","toLowerCase","unitValue","Error","JSON","stringify","numberToString","arg","match","String","toString","toTwos","dividedToIntegerBy","toPrecision","fromWei","weiInput","optionsInput","wei","negative","lt","base","baseLength","length","options","mul","fraction","mod","pad","whole","div","commify","replace","value","toWei","etherInput","ether","substring","comps","split","add","module","exports"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/ethjs-unit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1);\n\n// complete ethereum unit map\nvar unitMap = {\n  'noether': '0', // eslint-disable-line\n  'wei': '1', // eslint-disable-line\n  'kwei': '1000', // eslint-disable-line\n  'Kwei': '1000', // eslint-disable-line\n  'babbage': '1000', // eslint-disable-line\n  'femtoether': '1000', // eslint-disable-line\n  'mwei': '1000000', // eslint-disable-line\n  'Mwei': '1000000', // eslint-disable-line\n  'lovelace': '1000000', // eslint-disable-line\n  'picoether': '1000000', // eslint-disable-line\n  'gwei': '1000000000', // eslint-disable-line\n  'Gwei': '1000000000', // eslint-disable-line\n  'shannon': '1000000000', // eslint-disable-line\n  'nanoether': '1000000000', // eslint-disable-line\n  'nano': '1000000000', // eslint-disable-line\n  'szabo': '1000000000000', // eslint-disable-line\n  'microether': '1000000000000', // eslint-disable-line\n  'micro': '1000000000000', // eslint-disable-line\n  'finney': '1000000000000000', // eslint-disable-line\n  'milliether': '1000000000000000', // eslint-disable-line\n  'milli': '1000000000000000', // eslint-disable-line\n  'ether': '1000000000000000000', // eslint-disable-line\n  'kether': '1000000000000000000000', // eslint-disable-line\n  'grand': '1000000000000000000000', // eslint-disable-line\n  'mether': '1000000000000000000000000', // eslint-disable-line\n  'gether': '1000000000000000000000000000', // eslint-disable-line\n  'tether': '1000000000000000000000000000000' };\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error('while converting number to string, invalid number value \\'' + arg + '\\', should be a number matching (^-?[0-9.]+).');\n    }\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n  throw new Error('while converting number to string, invalid number value \\'' + arg + '\\' type ' + typeof arg + '.');\n}\n\nfunction fromWei(weiInput, unit, optionsInput) {\n  var wei = numberToBN(weiInput); // eslint-disable-line\n  var negative = wei.lt(zero); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = '0' + fraction;\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction toWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n\n  // Is it negative?\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');\n  }\n\n  // Split it into a whole and fractional part\n  var comps = ether.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseLength) {\n    throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new BN(wei.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromWei: fromWei,\n  toWei: toWei\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}