{"ast":null,"code":"export function toHex(n) {\n  return \"0x\" + n.toString(16);\n}\nexport function fromHex(hexString) {\n  return Number.parseInt(hexString, 16);\n}\nexport function formatBlock(block) {\n  if (typeof block === \"string\") {\n    return block;\n  } else if (typeof block === \"number\" && Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}","map":{"version":3,"names":["toHex","n","toString","fromHex","hexString","Number","parseInt","formatBlock","block","isInteger"],"sources":["../../../src/util/hex.ts"],"sourcesContent":["export function toHex(n: number): string {\n  return `0x${n.toString(16)}`;\n}\n\nexport function fromHex(hexString: string): number {\n  return Number.parseInt(hexString, 16);\n}\n\nexport function formatBlock(block: string | number): string {\n  if (typeof block === \"string\") {\n    return block;\n  } else if (typeof block === \"number\" && Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\n"],"mappings":"AAAA,OAAM,SAAUA,KAAKA,CAACC,CAAS;EAC7B,OAAO,OAAKA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAG;AAC9B;AAEA,OAAM,SAAUC,OAAOA,CAACC,SAAiB;EACvC,OAAOC,MAAM,CAACC,QAAQ,CAACF,SAAS,EAAE,EAAE,CAAC;AACvC;AAEA,OAAM,SAAUG,WAAWA,CAACC,KAAsB;EAChD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;GACb,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIH,MAAM,CAACI,SAAS,CAACD,KAAK,CAAC,EAAE;IAC/D,OAAOR,KAAK,CAACQ,KAAK,CAAC;;EAErB,OAAOA,KAAK,CAACN,QAAQ,EAAE;AACzB"},"metadata":{},"sourceType":"module"}