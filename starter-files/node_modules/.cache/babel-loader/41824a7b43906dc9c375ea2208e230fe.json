{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\n\nconst utils = require('web3-utils');\nconst BigNumber = require('bn.js');\nconst leftPad = function (string, bytes) {\n  let result = string;\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = function (iban) {\n  const A = 'A'.charCodeAt(0);\n  const Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.slice(4) + iban.slice(0, 4);\n  return iban.split('').map(function (n) {\n    const code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = function (iban) {\n  let remainder = iban;\n  let block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nclass Iban {\n  constructor(iban) {\n    this._iban = iban;\n  }\n  /**\n   * This method should be used to create an ethereum address from a direct iban address\n   *\n   * @method toAddress\n   * @param {String} iban address\n   * @return {String} the ethereum address\n   */\n  static toAddress(ib) {\n    ib = new Iban(ib);\n    if (!ib.isDirect()) {\n      throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n    return ib.toAddress();\n  }\n  /**\n   * This method should be used to create iban address from an ethereum address\n   *\n   * @method toIban\n   * @param {String} address\n   * @return {String} the IBAN address\n   */\n  static toIban(address) {\n    return Iban.fromAddress(address).toString();\n  }\n  /**\n   * This method should be used to create iban object from an ethereum address\n   *\n   * @method fromAddress\n   * @param {String} address\n   * @return {Iban} the IBAN object\n   */\n  static fromAddress(address) {\n    if (!utils.isAddress(address)) {\n      throw new Error('Provided address is not a valid address: ' + address);\n    }\n    address = address.replace('0x', '').replace('0X', '');\n    const asBn = new BigNumber(address, 16);\n    const base36 = asBn.toString(36);\n    const padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n  }\n  /**\n   * Convert the passed BBAN to an IBAN for this country specification.\n   * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n   *\n   * @method fromBban\n   * @param {String} bban the BBAN to convert to IBAN\n   * @returns {Iban} the IBAN object\n   */\n  static fromBban(bban) {\n    const countryCode = 'XE';\n    const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    const checkDigit = ('0' + (98 - remainder)).slice(-2);\n    return new Iban(countryCode + checkDigit + bban);\n  }\n  /**\n   * Should be used to create IBAN object for given institution and identifier\n   *\n   * @method createIndirect\n   * @param {Object} options, required options are \"institution\" and \"identifier\"\n   * @return {Iban} the IBAN object\n   */\n  static createIndirect(options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n  }\n  /**\n   * This method should be used to check if given string is valid iban object\n   *\n   * @method isValid\n   * @param {String} iban string\n   * @return {Boolean} true if it is valid IBAN\n   */\n  static isValid(iban) {\n    const i = new Iban(iban);\n    return i.isValid();\n  }\n  /**\n   * Should be called to check if iban is correct\n   *\n   * @method isValid\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isValid() {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n  }\n  /**\n   * Should be called to check if iban number is direct\n   *\n   * @method isDirect\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isDirect() {\n    return this._iban.length === 34 || this._iban.length === 35;\n  }\n  /**\n   * Should be called to check if iban number if indirect\n   *\n   * @method isIndirect\n   * @returns {Boolean} true if it is, otherwise false\n   */\n  isIndirect() {\n    return this._iban.length === 20;\n  }\n  /**\n   * Should be called to get iban checksum\n   * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n   *\n   * @method checksum\n   * @returns {String} checksum\n   */\n  checksum() {\n    return this._iban.slice(2, 4);\n  }\n  /**\n   * Should be called to get institution identifier\n   * eg. XREG\n   *\n   * @method institution\n   * @returns {String} institution identifier\n   */\n  institution() {\n    return this.isIndirect() ? this._iban.slice(7, 11) : '';\n  }\n  /**\n   * Should be called to get client identifier within institution\n   * eg. GAVOFYORK\n   *\n   * @method client\n   * @returns {String} client identifier\n   */\n  client() {\n    return this.isIndirect() ? this._iban.slice(11) : '';\n  }\n  /**\n   * Should be called to get client direct address\n   *\n   * @method toAddress\n   * @returns {String} ethereum address\n   */\n  toAddress() {\n    if (this.isDirect()) {\n      const base36 = this._iban.slice(4);\n      const asBn = new BigNumber(base36, 36);\n      return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n    return '';\n  }\n  toString() {\n    return this._iban;\n  }\n}\nmodule.exports = Iban;","map":{"version":3,"names":["utils","require","BigNumber","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","slice","split","map","n","code","join","mod9710","remainder","block","parseInt","Iban","constructor","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","isAddress","replace","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","test","isIndirect","checksum","client","toChecksumAddress","module","exports"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/web3-eth-iban/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\nconst utils = require('web3-utils');\nconst BigNumber = require('bn.js');\nconst leftPad = function (string, bytes) {\n    let result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = function (iban) {\n    const A = 'A'.charCodeAt(0);\n    const Z = 'Z'.charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.slice(4) + iban.slice(0, 4);\n    return iban.split('').map(function (n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        }\n        else {\n            return n;\n        }\n    }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = function (iban) {\n    let remainder = iban;\n    let block;\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nclass Iban {\n    constructor(iban) {\n        this._iban = iban;\n    }\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     * @param {String} iban address\n     * @return {String} the ethereum address\n     */\n    static toAddress(ib) {\n        ib = new Iban(ib);\n        if (!ib.isDirect()) {\n            throw new Error('IBAN is indirect and can\\'t be converted');\n        }\n        return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */\n    static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */\n    static fromAddress(address) {\n        if (!utils.isAddress(address)) {\n            throw new Error('Provided address is not a valid address: ' + address);\n        }\n        address = address.replace('0x', '').replace('0X', '');\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */\n    static fromBban(bban) {\n        const countryCode = 'XE';\n        const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n        const checkDigit = ('0' + (98 - remainder)).slice(-2);\n        return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */\n    static createIndirect(options) {\n        return Iban.fromBban('ETH' + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */\n    static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n    ;\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isValid() {\n        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n            mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n    ;\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n    ;\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isIndirect() {\n        return this._iban.length === 20;\n    }\n    ;\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */\n    checksum() {\n        return this._iban.slice(2, 4);\n    }\n    ;\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */\n    institution() {\n        return this.isIndirect() ? this._iban.slice(7, 11) : '';\n    }\n    ;\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */\n    client() {\n        return this.isIndirect() ? this._iban.slice(11) : '';\n    }\n    ;\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */\n    toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.slice(4);\n            const asBn = new BigNumber(base36, 36);\n            return utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n        return '';\n    }\n    ;\n    toString() {\n        return this._iban;\n    }\n    ;\n}\nmodule.exports = Iban;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,MAAMC,SAAS,GAAGD,OAAO,CAAC,OAAO,CAAC;AAClC,MAAME,OAAO,GAAG,SAAAA,CAAUC,MAAM,EAAEC,KAAK,EAAE;EACrC,IAAIC,MAAM,GAAGF,MAAM;EACnB,OAAOE,MAAM,CAACC,MAAM,GAAGF,KAAK,GAAG,CAAC,EAAE;IAC9BC,MAAM,GAAG,GAAG,GAAGA,MAAM;EACzB;EACA,OAAOA,MAAM;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,eAAe,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACpC,MAAMC,CAAC,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;EAC3B,MAAMC,CAAC,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC;EAC3BF,IAAI,GAAGA,IAAI,CAACI,WAAW,EAAE;EACzBJ,IAAI,GAAGA,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,GAAGL,IAAI,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACvC,OAAOL,IAAI,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAUC,CAAC,EAAE;IACnC,MAAMC,IAAI,GAAGD,CAAC,CAACN,UAAU,CAAC,CAAC,CAAC;IAC5B,IAAIO,IAAI,IAAIR,CAAC,IAAIQ,IAAI,IAAIN,CAAC,EAAE;MACxB;MACA,OAAOM,IAAI,GAAGR,CAAC,GAAG,EAAE;IACxB,CAAC,MACI;MACD,OAAOO,CAAC;IACZ;EACJ,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,SAAAA,CAAUX,IAAI,EAAE;EAC5B,IAAIY,SAAS,GAAGZ,IAAI;EACpB,IAAIa,KAAK;EACT,OAAOD,SAAS,CAACd,MAAM,GAAG,CAAC,EAAE;IACzBe,KAAK,GAAGD,SAAS,CAACP,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7BO,SAAS,GAAGE,QAAQ,CAACD,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,GAAGD,SAAS,CAACP,KAAK,CAACQ,KAAK,CAACf,MAAM,CAAC;EACxE;EACA,OAAOgB,QAAQ,CAACF,SAAS,EAAE,EAAE,CAAC,GAAG,EAAE;AACvC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMG,IAAI,CAAC;EACPC,WAAWA,CAAChB,IAAI,EAAE;IACd,IAAI,CAACiB,KAAK,GAAGjB,IAAI;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOkB,SAASA,CAACC,EAAE,EAAE;IACjBA,EAAE,GAAG,IAAIJ,IAAI,CAACI,EAAE,CAAC;IACjB,IAAI,CAACA,EAAE,CAACC,QAAQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,OAAOF,EAAE,CAACD,SAAS,EAAE;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOI,MAAMA,CAACC,OAAO,EAAE;IACnB,OAAOR,IAAI,CAACS,WAAW,CAACD,OAAO,CAAC,CAACE,QAAQ,EAAE;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOD,WAAWA,CAACD,OAAO,EAAE;IACxB,IAAI,CAAChC,KAAK,CAACmC,SAAS,CAACH,OAAO,CAAC,EAAE;MAC3B,MAAM,IAAIF,KAAK,CAAC,2CAA2C,GAAGE,OAAO,CAAC;IAC1E;IACAA,OAAO,GAAGA,OAAO,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACrD,MAAMC,IAAI,GAAG,IAAInC,SAAS,CAAC8B,OAAO,EAAE,EAAE,CAAC;IACvC,MAAMM,MAAM,GAAGD,IAAI,CAACH,QAAQ,CAAC,EAAE,CAAC;IAChC,MAAMK,MAAM,GAAGpC,OAAO,CAACmC,MAAM,EAAE,EAAE,CAAC;IAClC,OAAOd,IAAI,CAACgB,QAAQ,CAACD,MAAM,CAAC1B,WAAW,EAAE,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO2B,QAAQA,CAACC,IAAI,EAAE;IAClB,MAAMC,WAAW,GAAG,IAAI;IACxB,MAAMrB,SAAS,GAAGD,OAAO,CAACZ,eAAe,CAACkC,WAAW,GAAG,IAAI,GAAGD,IAAI,CAAC,CAAC;IACrE,MAAME,UAAU,GAAG,CAAC,GAAG,IAAI,EAAE,GAAGtB,SAAS,CAAC,EAAEP,KAAK,CAAC,CAAC,CAAC,CAAC;IACrD,OAAO,IAAIU,IAAI,CAACkB,WAAW,GAAGC,UAAU,GAAGF,IAAI,CAAC;EACpD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,cAAcA,CAACC,OAAO,EAAE;IAC3B,OAAOrB,IAAI,CAACgB,QAAQ,CAAC,KAAK,GAAGK,OAAO,CAACC,WAAW,GAAGD,OAAO,CAACE,UAAU,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,OAAOA,CAACvC,IAAI,EAAE;IACjB,MAAMwC,CAAC,GAAG,IAAIzB,IAAI,CAACf,IAAI,CAAC;IACxB,OAAOwC,CAAC,CAACD,OAAO,EAAE;EACtB;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIA,OAAOA,CAAA,EAAG;IACN,OAAO,+CAA+C,CAACE,IAAI,CAAC,IAAI,CAACxB,KAAK,CAAC,IACnEN,OAAO,CAACZ,eAAe,CAAC,IAAI,CAACkB,KAAK,CAAC,CAAC,KAAK,CAAC;EAClD;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIG,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACH,KAAK,CAACnB,MAAM,KAAK,EAAE,IAAI,IAAI,CAACmB,KAAK,CAACnB,MAAM,KAAK,EAAE;EAC/D;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI4C,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACzB,KAAK,CAACnB,MAAM,KAAK,EAAE;EACnC;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI6C,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC1B,KAAK,CAACZ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACjC;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIgC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACK,UAAU,EAAE,GAAG,IAAI,CAACzB,KAAK,CAACZ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE;EAC3D;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACF,UAAU,EAAE,GAAG,IAAI,CAACzB,KAAK,CAACZ,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE;EACxD;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIa,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAACE,QAAQ,EAAE,EAAE;MACjB,MAAMS,MAAM,GAAG,IAAI,CAACZ,KAAK,CAACZ,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMuB,IAAI,GAAG,IAAInC,SAAS,CAACoC,MAAM,EAAE,EAAE,CAAC;MACtC,OAAOtC,KAAK,CAACsD,iBAAiB,CAACjB,IAAI,CAACH,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACzD;IACA,OAAO,EAAE;EACb;EAEAA,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACR,KAAK;EACrB;AAEJ;AACA6B,MAAM,CAACC,OAAO,GAAGhC,IAAI"},"metadata":{},"sourceType":"script"}