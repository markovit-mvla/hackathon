{"ast":null,"code":"const createKeccak = require('./keccak');\nconst createShake = require('./shake');\nmodule.exports = function (KeccakState) {\n  const Keccak = createKeccak(KeccakState);\n  const Shake = createShake(KeccakState);\n  return function (algorithm, options) {\n    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;\n    switch (hash) {\n      case 'keccak224':\n        return new Keccak(1152, 448, null, 224, options);\n      case 'keccak256':\n        return new Keccak(1088, 512, null, 256, options);\n      case 'keccak384':\n        return new Keccak(832, 768, null, 384, options);\n      case 'keccak512':\n        return new Keccak(576, 1024, null, 512, options);\n      case 'sha3-224':\n        return new Keccak(1152, 448, 0x06, 224, options);\n      case 'sha3-256':\n        return new Keccak(1088, 512, 0x06, 256, options);\n      case 'sha3-384':\n        return new Keccak(832, 768, 0x06, 384, options);\n      case 'sha3-512':\n        return new Keccak(576, 1024, 0x06, 512, options);\n      case 'shake128':\n        return new Shake(1344, 256, 0x1f, options);\n      case 'shake256':\n        return new Shake(1088, 512, 0x1f, options);\n      default:\n        throw new Error('Invald algorithm: ' + algorithm);\n    }\n  };\n};","map":{"version":3,"names":["createKeccak","require","createShake","module","exports","KeccakState","Keccak","Shake","algorithm","options","hash","toLowerCase","Error"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/keccak/lib/api/index.js"],"sourcesContent":["const createKeccak = require('./keccak')\nconst createShake = require('./shake')\n\nmodule.exports = function (KeccakState) {\n  const Keccak = createKeccak(KeccakState)\n  const Shake = createShake(KeccakState)\n\n  return function (algorithm, options) {\n    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm\n    switch (hash) {\n      case 'keccak224': return new Keccak(1152, 448, null, 224, options)\n      case 'keccak256': return new Keccak(1088, 512, null, 256, options)\n      case 'keccak384': return new Keccak(832, 768, null, 384, options)\n      case 'keccak512': return new Keccak(576, 1024, null, 512, options)\n\n      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)\n      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)\n      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)\n      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)\n\n      case 'shake128': return new Shake(1344, 256, 0x1f, options)\n      case 'shake256': return new Shake(1088, 512, 0x1f, options)\n\n      default: throw new Error('Invald algorithm: ' + algorithm)\n    }\n  }\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,UAAU,CAAC;AACxC,MAAMC,WAAW,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEtCE,MAAM,CAACC,OAAO,GAAG,UAAUC,WAAW,EAAE;EACtC,MAAMC,MAAM,GAAGN,YAAY,CAACK,WAAW,CAAC;EACxC,MAAME,KAAK,GAAGL,WAAW,CAACG,WAAW,CAAC;EAEtC,OAAO,UAAUG,SAAS,EAAEC,OAAO,EAAE;IACnC,MAAMC,IAAI,GAAG,OAAOF,SAAS,KAAK,QAAQ,GAAGA,SAAS,CAACG,WAAW,EAAE,GAAGH,SAAS;IAChF,QAAQE,IAAI;MACV,KAAK,WAAW;QAAE,OAAO,IAAIJ,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MAClE,KAAK,WAAW;QAAE,OAAO,IAAIH,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MAClE,KAAK,WAAW;QAAE,OAAO,IAAIH,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MACjE,KAAK,WAAW;QAAE,OAAO,IAAIH,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MAElE,KAAK,UAAU;QAAE,OAAO,IAAIH,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MACjE,KAAK,UAAU;QAAE,OAAO,IAAIH,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MACjE,KAAK,UAAU;QAAE,OAAO,IAAIH,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MAChE,KAAK,UAAU;QAAE,OAAO,IAAIH,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAEG,OAAO,CAAC;MAEjE,KAAK,UAAU;QAAE,OAAO,IAAIF,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAEE,OAAO,CAAC;MAC3D,KAAK,UAAU;QAAE,OAAO,IAAIF,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAEE,OAAO,CAAC;MAE3D;QAAS,MAAM,IAAIG,KAAK,CAAC,oBAAoB,GAAGJ,SAAS,CAAC;IAAA;EAE9D,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}