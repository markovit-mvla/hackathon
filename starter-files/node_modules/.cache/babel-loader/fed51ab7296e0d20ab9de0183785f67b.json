{"ast":null,"code":"require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst {\n  createAlchemyWeb3\n} = require('@alch/alchemy-web3');\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\nexport const helloWorldContract = new web3.eth.Contact(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectToEthChain = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"\"\n    };\n  }\n};\nexport const validateVoter = async () => {\n  const video = document.querySelector('video');\n  const constraints = {\n    video: true\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    video.srcObject = stream;\n    video.play();\n  }).catch(err => {\n    console.error('Error accessing camera:', err);\n  });\n  const canvas = document.querySelector('canvas');\n  const ctx = canvas.getContext('2d');\n  const scanButton = document.querySelector('#verify-button'); // Need to add scan/verify button\n  scanButton.addEventListener('click', () => {\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    /* Process image */\n  });\n};\n\nexport const getCurrentVoterConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"\"\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {};","map":{"version":3,"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contact","loadCurrentMessage","message","methods","call","connectToEthChain","window","ethereum","addressArray","request","method","obj","status","address","err","validateVoter","video","document","querySelector","constraints","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","catch","console","error","canvas","ctx","getContext","scanButton","addEventListener","drawImage","width","height","imageData","getImageData","getCurrentVoterConnected","length","updateMessage"],"sources":["C:/Users/jack/git/hackathon/starter-files/src/util/interact.js"],"sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3');\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contact(\r\n    contractABI,\r\n    contractAddress\r\n);\r\n\r\nexport const loadCurrentMessage = async () => { \r\n  const message = await helloWorldContract.methods.message().call();\r\n  return message;\r\n};\r\n\r\nexport const connectToEthChain = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n              method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n              status: \"👆🏽 Write a message in the text-field above.\",\r\n              address: addressArray[0],\r\n            };\r\n            return obj;\r\n          } catch (err) {\r\n            return {\r\n              address: \"\",\r\n              status: err.message,\r\n            };\r\n          }\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"\",\r\n        }\r\n    }\r\n};\r\n\r\nexport const validateVoter = async () => {\r\n    const video = document.querySelector('video');\r\n    const constraints = { video: true };\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n        .then(stream => {\r\n            video.srcObject = stream;\r\n            video.play();\r\n        })\r\n        .catch(err => {\r\n            console.error('Error accessing camera:', err);\r\n        });\r\n    const canvas = document.querySelector('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const scanButton = document.querySelector('#verify-button'); // Need to add scan/verify button\r\n    scanButton.addEventListener('click', () => {\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        /* Process image */\r\n    });\r\n};\r\n\r\nexport const getCurrentVoterConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n          const addressArray = await window.ethereum.request({\r\n            method: \"eth_accounts\",\r\n          });\r\n          if (addressArray.length > 0) {\r\n            return {\r\n              address: addressArray[0],\r\n              status: \"👆🏽 Write a message in the text-field above.\",\r\n            };\r\n          } else {\r\n            return {\r\n              address: \"\",\r\n              status: \"\",\r\n            };\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            address: \"\",\r\n            status: err.message,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"\",\r\n        }\r\n      }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n  \r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}