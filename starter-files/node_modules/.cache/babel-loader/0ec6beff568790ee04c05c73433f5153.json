{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar ethereumjsUtil = require('ethereumjs-util');\nvar ethereumBloomFilters = require('ethereum-bloom-filters');\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n  return BN.isBN(object);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n  return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function (number) {\n  try {\n    return numberToBN.apply(null, arguments);\n  } catch (e) {\n    throw new Error(e + ' Given value: \"' + number + '\"');\n  }\n};\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n  return '0x' + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false;\n    // If it's ALL lowercase or ALL upppercase\n  } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n    return true;\n    // Otherwise check each case\n  } else {\n    return checkAddressChecksum(address);\n  }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n  // Check each case\n  address = address.replace(/^0x/i, '');\n  var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign ? sign : \"0\");\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function (str) {\n  str = utf8.encode(str);\n  var hex = \"\";\n  // remove \\u0000 padding from either side\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    // if (code !== 0) {\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n    // }\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function (hex) {\n  if (!isHexStrict(hex)) throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n  var str = \"\";\n  var code = 0;\n  hex = hex.replace(/^0x/i, '');\n  // remove 00 padding from either side\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  var l = hex.length;\n  for (var i = 0; i < l; i += 2) {\n    code = parseInt(hex.slice(i, i + 2), 16);\n    // if (code !== 0) {\n    str += String.fromCharCode(code);\n    // }\n  }\n\n  return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation.\n * However, if the value is larger than the maximum safe integer, returns the value as a string.\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */\nvar hexToNumber = function (value) {\n  let bigIntOnOverflow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!value) {\n    return value;\n  }\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n  }\n  const n = toBN(value);\n  if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {\n    return BigInt(n);\n  }\n  return n.toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n  if (!value) return value;\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n  }\n  return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n  if (value === null || value === undefined) {\n    return value;\n  }\n  if (!isFinite(value) && !isHexStrict(value)) {\n    throw new Error('Given input \"' + value + '\" is not a number.');\n  }\n  var number = toBN(value);\n  var result = number.toString(16);\n  return number.lt(new BN(0)) ? '-0x' + result.slice(1) : '0x' + result;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function (bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    /* jshint ignore:start */\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xF).toString(16));\n    /* jshint ignore:end */\n  }\n\n  return '0x' + hex.join(\"\");\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function (hex) {\n  hex = hex.toString(16);\n  if (!isHexStrict(hex)) {\n    throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n  }\n  hex = hex.replace(/^0x/i, '');\n  for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.slice(c, c + 2), 16));\n  return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object|Buffer} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n  /*jshint maxcomplexity: false */\n  if (isAddress(value)) {\n    return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n  }\n  if (typeof value === 'boolean') {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n  if (Buffer.isBuffer(value)) {\n    return '0x' + value.toString('hex');\n  }\n  if (typeof value === 'object' && !!value && !isBigNumber(value) && !isBN(value)) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  }\n  // if its a negative number, pass it through numberToHex\n  if (typeof value === 'string') {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : numberToHex(value);\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    } else if (!isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n  return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n};\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n  return (typeof hex === 'string' || typeof hex === 'number') && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n  return (typeof hex === 'string' || typeof hex === 'number') && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\n * Remove 0x prefix from string\n *\n * @method stripHexPrefix\n * @param {String} str to be checked\n * @returns {String}\n */\nvar stripHexPrefix = function (str) {\n  if (str !== 0 && isHex(str)) return str.replace(/^(-)?0x/i, '$1');\n  return str;\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} bloom encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n  return ethereumBloomFilters.isBloom(bloom);\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} ethereumAddress encoded bloom filter\n * @param {String} bloom ethereum addresss\n * @return {Boolean}\n */\nvar isUserEthereumAddressInBloom = function (bloom, ethereumAddress) {\n  return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);\n};\n/**\n * Returns true if the contract address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} contractAddress contract addresss\n * @return {Boolean}\n */\nvar isContractAddressInBloom = function (bloom, contractAddress) {\n  return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n  return ethereumBloomFilters.isTopic(topic);\n};\n/**\n * Returns true if the topic is part of the given bloom\n * note: false positives are possible.\n *\n * @method isTopicInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopicInBloom = function (bloom, topic) {\n  return ethereumBloomFilters.isTopicInBloom(bloom, topic);\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @method isInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String | Uint8Array} topic encoded value\n * @return {Boolean}\n */\nvar isInBloom = function (bloom, topic) {\n  return ethereumBloomFilters.isInBloom(bloom, topic);\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nvar sha3 = function (value) {\n  if (isBN(value)) {\n    value = value.toString();\n  }\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    value = ethereumjsUtil.toBuffer(value);\n  } else if (typeof value === 'string') {\n    // Assume value is an arbitrary string\n    value = Buffer.from(value, 'utf-8');\n  }\n  var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(value));\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  } else {\n    return returnValue;\n  }\n};\n// expose the under the hood keccak256\nsha3._Hash = ethereumjsUtil.keccak256;\n/**\n * @method sha3Raw\n *\n * @param value\n *\n * @returns {string}\n */\nvar sha3Raw = function (value) {\n  value = sha3(value);\n  if (value === null) {\n    return SHA3_NULL_S;\n  }\n  return value;\n};\n/**\n * Auto converts any given value into it's hex representation,\n * then converts hex to number.\n *\n * @method toNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */\nvar toNumber = function (value) {\n  let bigIntOnOverflow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return typeof value === 'number' ? value : hexToNumber(toHex(value), bigIntOnOverflow);\n};\n// 1.x currently accepts 0x... strings, bn.js after update doesn't. it would be a breaking change\nvar BNwrapped = function (value) {\n  // check negative\n  if (typeof value == \"string\" && value.includes(\"0x\")) {\n    const [negative, hexValue] = value.toLocaleLowerCase().startsWith('-') ? [\"-\", value.slice(3)] : [\"\", value.slice(2)];\n    return new BN(negative + hexValue, 16);\n  } else {\n    return new BN(value);\n  }\n};\nObject.setPrototypeOf(BNwrapped, BN);\nObject.setPrototypeOf(BNwrapped.prototype, BN.prototype);\nmodule.exports = {\n  BN: BNwrapped,\n  isBN: isBN,\n  isBigNumber: isBigNumber,\n  toBN: toBN,\n  isAddress: isAddress,\n  isBloom: isBloom,\n  isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,\n  isContractAddressInBloom: isContractAddressInBloom,\n  isTopic: isTopic,\n  isTopicInBloom: isTopicInBloom,\n  isInBloom: isInBloom,\n  checkAddressChecksum: checkAddressChecksum,\n  utf8ToHex: utf8ToHex,\n  hexToUtf8: hexToUtf8,\n  hexToNumber: hexToNumber,\n  hexToNumberString: hexToNumberString,\n  numberToHex: numberToHex,\n  toHex: toHex,\n  hexToBytes: hexToBytes,\n  bytesToHex: bytesToHex,\n  isHex: isHex,\n  isHexStrict: isHexStrict,\n  stripHexPrefix: stripHexPrefix,\n  leftPad: leftPad,\n  rightPad: rightPad,\n  toTwosComplement: toTwosComplement,\n  sha3: sha3,\n  sha3Raw: sha3Raw,\n  toNumber: toNumber\n};","map":{"version":3,"names":["BN","require","numberToBN","utf8","ethereumjsUtil","ethereumBloomFilters","isBN","object","isBigNumber","constructor","name","toBN","number","apply","arguments","e","Error","toTwosComplement","toTwos","toString","isAddress","address","test","checkAddressChecksum","replace","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase","leftPad","string","chars","sign","hasPrefix","padding","length","Array","join","rightPad","utf8ToHex","str","encode","hex","split","reverse","code","charCodeAt","n","hexToUtf8","isHexStrict","l","slice","String","fromCharCode","decode","hexToNumber","value","bigIntOnOverflow","undefined","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","BigInt","toNumber","hexToNumberString","numberToHex","isFinite","result","lt","bytesToHex","bytes","push","hexToBytes","c","toHex","returnType","Buffer","isBuffer","JSON","stringify","indexOf","isHex","stripHexPrefix","isBloom","bloom","isUserEthereumAddressInBloom","ethereumAddress","isContractAddressInBloom","contractAddress","isTopic","topic","isTopicInBloom","isInBloom","SHA3_NULL_S","toBuffer","from","returnValue","bufferToHex","keccak256","_Hash","sha3Raw","BNwrapped","includes","negative","hexValue","toLocaleLowerCase","startsWith","Object","setPrototypeOf","prototype","module","exports"],"sources":["C:/Users/jack/git/hackathon/starter-files/node_modules/web3-utils/lib/utils.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar ethereumjsUtil = require('ethereumjs-util');\nvar ethereumBloomFilters = require('ethereum-bloom-filters');\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return BN.isBN(object);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function (number) {\n    try {\n        return numberToBN.apply(null, arguments);\n    }\n    catch (e) {\n        throw new Error(e + ' Given value: \"' + number + '\"');\n    }\n};\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x' + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    }\n    else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    }\n    else {\n        return checkAddressChecksum(address);\n    }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i, '');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n    for (var i = 0; i < 40; i++) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i, '');\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i, '');\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function (str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str.split(\"\").reverse().join(\"\");\n    for (var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n    return \"0x\" + hex;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function (hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i, '');\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/, '');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/, '');\n    hex = hex.split(\"\").reverse().join(\"\");\n    var l = hex.length;\n    for (var i = 0; i < l; i += 2) {\n        code = parseInt(hex.slice(i, i + 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n    return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation.\n * However, if the value is larger than the maximum safe integer, returns the value as a string.\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */\nvar hexToNumber = function (value, bigIntOnOverflow = false) {\n    if (!value) {\n        return value;\n    }\n    if (typeof value === 'string' && !isHexStrict(value)) {\n        throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n    }\n    const n = toBN(value);\n    if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {\n        return BigInt(n);\n    }\n    return n.toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value)\n        return value;\n    if (typeof value === 'string' && !isHexStrict(value)) {\n        throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n    }\n    return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if ((value === null || value === undefined)) {\n        return value;\n    }\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"' + value + '\" is not a number.');\n    }\n    var number = toBN(value);\n    var result = number.toString(16);\n    return number.lt(new BN(0)) ? '-0x' + result.slice(1) : '0x' + result;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function (bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x' + hex.join(\"\");\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function (hex) {\n    hex = hex.toString(16);\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n    }\n    hex = hex.replace(/^0x/i, '');\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.slice(c, c + 2), 16));\n    return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object|Buffer} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n    }\n    if (typeof value === 'boolean') {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n    if (Buffer.isBuffer(value)) {\n        return '0x' + value.toString('hex');\n    }\n    if (typeof value === 'object' && !!value && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n    // if its a negative number, pass it through numberToHex\n    if (typeof value === 'string') {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        }\n        else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        }\n        else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((typeof hex === 'string' || typeof hex === 'number') && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((typeof hex === 'string' || typeof hex === 'number') && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n/**\n * Remove 0x prefix from string\n *\n * @method stripHexPrefix\n * @param {String} str to be checked\n * @returns {String}\n */\nvar stripHexPrefix = function (str) {\n    if (str !== 0 && isHex(str))\n        return str.replace(/^(-)?0x/i, '$1');\n    return str;\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} bloom encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    return ethereumBloomFilters.isBloom(bloom);\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} ethereumAddress encoded bloom filter\n * @param {String} bloom ethereum addresss\n * @return {Boolean}\n */\nvar isUserEthereumAddressInBloom = function (bloom, ethereumAddress) {\n    return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);\n};\n/**\n * Returns true if the contract address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} contractAddress contract addresss\n * @return {Boolean}\n */\nvar isContractAddressInBloom = function (bloom, contractAddress) {\n    return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    return ethereumBloomFilters.isTopic(topic);\n};\n/**\n * Returns true if the topic is part of the given bloom\n * note: false positives are possible.\n *\n * @method isTopicInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopicInBloom = function (bloom, topic) {\n    return ethereumBloomFilters.isTopicInBloom(bloom, topic);\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @method isInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String | Uint8Array} topic encoded value\n * @return {Boolean}\n */\nvar isInBloom = function (bloom, topic) {\n    return ethereumBloomFilters.isInBloom(bloom, topic);\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nvar sha3 = function (value) {\n    if (isBN(value)) {\n        value = value.toString();\n    }\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = ethereumjsUtil.toBuffer(value);\n    }\n    else if (typeof value === 'string') {\n        // Assume value is an arbitrary string\n        value = Buffer.from(value, 'utf-8');\n    }\n    var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(value));\n    if (returnValue === SHA3_NULL_S) {\n        return null;\n    }\n    else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = ethereumjsUtil.keccak256;\n/**\n * @method sha3Raw\n *\n * @param value\n *\n * @returns {string}\n */\nvar sha3Raw = function (value) {\n    value = sha3(value);\n    if (value === null) {\n        return SHA3_NULL_S;\n    }\n    return value;\n};\n/**\n * Auto converts any given value into it's hex representation,\n * then converts hex to number.\n *\n * @method toNumber\n * @param {String|Number|BN} value\n * @param {Boolean} bigIntOnOverflow - if true, return the hex value in case of overflow\n * @return {Number|String}\n */\nvar toNumber = function (value, bigIntOnOverflow = false) {\n    return typeof value === 'number' ? value : hexToNumber(toHex(value), bigIntOnOverflow);\n};\n// 1.x currently accepts 0x... strings, bn.js after update doesn't. it would be a breaking change\nvar BNwrapped = function (value) {\n    // check negative\n    if (typeof value == \"string\" && value.includes(\"0x\")) {\n        const [negative, hexValue] = value.toLocaleLowerCase().startsWith('-') ? [\"-\", value.slice(3)] : [\"\", value.slice(2)];\n        return new BN(negative + hexValue, 16);\n    }\n    else {\n        return new BN(value);\n    }\n};\nObject.setPrototypeOf(BNwrapped, BN);\nObject.setPrototypeOf(BNwrapped.prototype, BN.prototype);\nmodule.exports = {\n    BN: BNwrapped,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom,\n    isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,\n    isContractAddressInBloom: isContractAddressInBloom,\n    isTopic: isTopic,\n    isTopicInBloom: isTopicInBloom,\n    isInBloom: isInBloom,\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    stripHexPrefix: stripHexPrefix,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3,\n    sha3Raw: sha3Raw,\n    toNumber: toNumber\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,EAAE,GAAGC,OAAO,CAAC,OAAO,CAAC;AACzB,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIG,cAAc,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC/C,IAAII,oBAAoB,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,IAAI,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACzB,OAAOP,EAAE,CAACM,IAAI,CAACC,MAAM,CAAC;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,SAAAA,CAAUD,MAAM,EAAE;EAChC,OAAOA,MAAM,IAAIA,MAAM,CAACE,WAAW,IAAIF,MAAM,CAACE,WAAW,CAACC,IAAI,KAAK,WAAW;AAClF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,SAAAA,CAAUC,MAAM,EAAE;EACzB,IAAI;IACA,OAAOV,UAAU,CAACW,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC5C,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,MAAM,IAAIC,KAAK,CAACD,CAAC,GAAG,iBAAiB,GAAGH,MAAM,GAAG,GAAG,CAAC;EACzD;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,gBAAgB,GAAG,SAAAA,CAAUL,MAAM,EAAE;EACrC,OAAO,IAAI,GAAGD,IAAI,CAACC,MAAM,CAAC,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC;AAC3D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAC/B;EACA,IAAI,CAAC,sBAAsB,CAACC,IAAI,CAACD,OAAO,CAAC,EAAE;IACvC,OAAO,KAAK;IACZ;EACJ,CAAC,MACI,IAAI,wBAAwB,CAACC,IAAI,CAACD,OAAO,CAAC,IAAI,wBAAwB,CAACC,IAAI,CAACD,OAAO,CAAC,EAAE;IACvF,OAAO,IAAI;IACX;EACJ,CAAC,MACI;IACD,OAAOE,oBAAoB,CAACF,OAAO,CAAC;EACxC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,oBAAoB,GAAG,SAAAA,CAAUF,OAAO,EAAE;EAC1C;EACAA,OAAO,GAAGA,OAAO,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACrC,IAAIC,WAAW,GAAGC,IAAI,CAACL,OAAO,CAACM,WAAW,EAAE,CAAC,CAACH,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACjE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACzB;IACA,IAAKC,QAAQ,CAACJ,WAAW,CAACG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAIP,OAAO,CAACO,CAAC,CAAC,CAACE,WAAW,EAAE,KAAKT,OAAO,CAACO,CAAC,CAAC,IAAMC,QAAQ,CAACJ,WAAW,CAACG,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAIP,OAAO,CAACO,CAAC,CAAC,CAACD,WAAW,EAAE,KAAKN,OAAO,CAACO,CAAC,CAAE,EAAE;MACjK,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,OAAO,GAAG,SAAAA,CAAUC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACzC,IAAIC,SAAS,GAAG,MAAM,CAACb,IAAI,CAACU,MAAM,CAAC,IAAI,OAAOA,MAAM,KAAK,QAAQ;EACjEA,MAAM,GAAGA,MAAM,CAACb,QAAQ,CAAC,EAAE,CAAC,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAChD,IAAIY,OAAO,GAAIH,KAAK,GAAGD,MAAM,CAACK,MAAM,GAAG,CAAC,IAAI,CAAC,GAAIJ,KAAK,GAAGD,MAAM,CAACK,MAAM,GAAG,CAAC,GAAG,CAAC;EAC9E,OAAO,CAACF,SAAS,GAAG,IAAI,GAAG,EAAE,IAAI,IAAIG,KAAK,CAACF,OAAO,CAAC,CAACG,IAAI,CAACL,IAAI,GAAGA,IAAI,GAAG,GAAG,CAAC,GAAGF,MAAM;AACxF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIQ,QAAQ,GAAG,SAAAA,CAAUR,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC1C,IAAIC,SAAS,GAAG,MAAM,CAACb,IAAI,CAACU,MAAM,CAAC,IAAI,OAAOA,MAAM,KAAK,QAAQ;EACjEA,MAAM,GAAGA,MAAM,CAACb,QAAQ,CAAC,EAAE,CAAC,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAChD,IAAIY,OAAO,GAAIH,KAAK,GAAGD,MAAM,CAACK,MAAM,GAAG,CAAC,IAAI,CAAC,GAAIJ,KAAK,GAAGD,MAAM,CAACK,MAAM,GAAG,CAAC,GAAG,CAAC;EAC9E,OAAO,CAACF,SAAS,GAAG,IAAI,GAAG,EAAE,IAAIH,MAAM,GAAI,IAAIM,KAAK,CAACF,OAAO,CAAC,CAACG,IAAI,CAACL,IAAI,GAAGA,IAAI,GAAG,GAAG,CAAE;AAC1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIO,SAAS,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC3BA,GAAG,GAAGvC,IAAI,CAACwC,MAAM,CAACD,GAAG,CAAC;EACtB,IAAIE,GAAG,GAAG,EAAE;EACZ;EACAF,GAAG,GAAGA,GAAG,CAAClB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACrCkB,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE,CAACP,IAAI,CAAC,EAAE,CAAC;EACtCG,GAAG,GAAGA,GAAG,CAAClB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACrCkB,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE,CAACP,IAAI,CAAC,EAAE,CAAC;EACtC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,GAAG,CAACL,MAAM,EAAET,CAAC,EAAE,EAAE;IACjC,IAAImB,IAAI,GAAGL,GAAG,CAACM,UAAU,CAACpB,CAAC,CAAC;IAC5B;IACA,IAAIqB,CAAC,GAAGF,IAAI,CAAC5B,QAAQ,CAAC,EAAE,CAAC;IACzByB,GAAG,IAAIK,CAAC,CAACZ,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGY,CAAC,GAAGA,CAAC;IACjC;EACJ;;EACA,OAAO,IAAI,GAAGL,GAAG;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,SAAS,GAAG,SAAAA,CAAUN,GAAG,EAAE;EAC3B,IAAI,CAACO,WAAW,CAACP,GAAG,CAAC,EACjB,MAAM,IAAI5B,KAAK,CAAC,iBAAiB,GAAG4B,GAAG,GAAG,+BAA+B,CAAC;EAC9E,IAAIF,GAAG,GAAG,EAAE;EACZ,IAAIK,IAAI,GAAG,CAAC;EACZH,GAAG,GAAGA,GAAG,CAACpB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAC7B;EACAoB,GAAG,GAAGA,GAAG,CAACpB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EACjCoB,GAAG,GAAGA,GAAG,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE,CAACP,IAAI,CAAC,EAAE,CAAC;EACtCK,GAAG,GAAGA,GAAG,CAACpB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EACjCoB,GAAG,GAAGA,GAAG,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE,CAACP,IAAI,CAAC,EAAE,CAAC;EACtC,IAAIa,CAAC,GAAGR,GAAG,CAACP,MAAM;EAClB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,CAAC,EAAExB,CAAC,IAAI,CAAC,EAAE;IAC3BmB,IAAI,GAAGlB,QAAQ,CAACe,GAAG,CAACS,KAAK,CAACzB,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC;IACAc,GAAG,IAAIY,MAAM,CAACC,YAAY,CAACR,IAAI,CAAC;IAChC;EACJ;;EACA,OAAO5C,IAAI,CAACqD,MAAM,CAACd,GAAG,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIe,WAAW,GAAG,SAAAA,CAAUC,KAAK,EAA4B;EAAA,IAA1BC,gBAAgB,GAAA7C,SAAA,CAAAuB,MAAA,QAAAvB,SAAA,QAAA8C,SAAA,GAAA9C,SAAA,MAAG,KAAK;EACvD,IAAI,CAAC4C,KAAK,EAAE;IACR,OAAOA,KAAK;EAChB;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACP,WAAW,CAACO,KAAK,CAAC,EAAE;IAClD,MAAM,IAAI1C,KAAK,CAAC,eAAe,GAAG0C,KAAK,GAAG,8BAA8B,CAAC;EAC7E;EACA,MAAMT,CAAC,GAAGtC,IAAI,CAAC+C,KAAK,CAAC;EACrB,IAAIC,gBAAgB,KAAKV,CAAC,GAAGY,MAAM,CAACC,gBAAgB,IAAIb,CAAC,GAAGY,MAAM,CAACE,gBAAgB,CAAC,EAAE;IAClF,OAAOC,MAAM,CAACf,CAAC,CAAC;EACpB;EACA,OAAOA,CAAC,CAACgB,QAAQ,EAAE;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,SAAAA,CAAUR,KAAK,EAAE;EACrC,IAAI,CAACA,KAAK,EACN,OAAOA,KAAK;EAChB,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACP,WAAW,CAACO,KAAK,CAAC,EAAE;IAClD,MAAM,IAAI1C,KAAK,CAAC,eAAe,GAAG0C,KAAK,GAAG,8BAA8B,CAAC;EAC7E;EACA,OAAO/C,IAAI,CAAC+C,KAAK,CAAC,CAACvC,QAAQ,CAAC,EAAE,CAAC;AACnC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIgD,WAAW,GAAG,SAAAA,CAAUT,KAAK,EAAE;EAC/B,IAAKA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAG;IACzC,OAAOF,KAAK;EAChB;EACA,IAAI,CAACU,QAAQ,CAACV,KAAK,CAAC,IAAI,CAACP,WAAW,CAACO,KAAK,CAAC,EAAE;IACzC,MAAM,IAAI1C,KAAK,CAAC,eAAe,GAAG0C,KAAK,GAAG,oBAAoB,CAAC;EACnE;EACA,IAAI9C,MAAM,GAAGD,IAAI,CAAC+C,KAAK,CAAC;EACxB,IAAIW,MAAM,GAAGzD,MAAM,CAACO,QAAQ,CAAC,EAAE,CAAC;EAChC,OAAOP,MAAM,CAAC0D,EAAE,CAAC,IAAItE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,GAAGqE,MAAM,CAAChB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGgB,MAAM;AACzE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,UAAU,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC9B,KAAK,IAAI5B,GAAG,GAAG,EAAE,EAAEhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,KAAK,CAACnC,MAAM,EAAET,CAAC,EAAE,EAAE;IAC7C;IACAgB,GAAG,CAAC6B,IAAI,CAAC,CAACD,KAAK,CAAC5C,CAAC,CAAC,KAAK,CAAC,EAAET,QAAQ,CAAC,EAAE,CAAC,CAAC;IACvCyB,GAAG,CAAC6B,IAAI,CAAC,CAACD,KAAK,CAAC5C,CAAC,CAAC,GAAG,GAAG,EAAET,QAAQ,CAAC,EAAE,CAAC,CAAC;IACvC;EACJ;;EACA,OAAO,IAAI,GAAGyB,GAAG,CAACL,IAAI,CAAC,EAAE,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAImC,UAAU,GAAG,SAAAA,CAAU9B,GAAG,EAAE;EAC5BA,GAAG,GAAGA,GAAG,CAACzB,QAAQ,CAAC,EAAE,CAAC;EACtB,IAAI,CAACgC,WAAW,CAACP,GAAG,CAAC,EAAE;IACnB,MAAM,IAAI5B,KAAK,CAAC,eAAe,GAAG4B,GAAG,GAAG,8BAA8B,CAAC;EAC3E;EACAA,GAAG,GAAGA,GAAG,CAACpB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAC7B,KAAK,IAAIgD,KAAK,GAAG,EAAE,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,GAAG,CAACP,MAAM,EAAEsC,CAAC,IAAI,CAAC,EAC9CH,KAAK,CAACC,IAAI,CAAC5C,QAAQ,CAACe,GAAG,CAACS,KAAK,CAACsB,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACjD,OAAOH,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,KAAK,GAAG,SAAAA,CAAUlB,KAAK,EAAEmB,UAAU,EAAE;EACrC;EACA,IAAIzD,SAAS,CAACsC,KAAK,CAAC,EAAE;IAClB,OAAOmB,UAAU,GAAG,SAAS,GAAG,IAAI,GAAGnB,KAAK,CAAC/B,WAAW,EAAE,CAACH,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAClF;EACA,IAAI,OAAOkC,KAAK,KAAK,SAAS,EAAE;IAC5B,OAAOmB,UAAU,GAAG,MAAM,GAAGnB,KAAK,GAAG,MAAM,GAAG,MAAM;EACxD;EACA,IAAIoB,MAAM,CAACC,QAAQ,CAACrB,KAAK,CAAC,EAAE;IACxB,OAAO,IAAI,GAAGA,KAAK,CAACvC,QAAQ,CAAC,KAAK,CAAC;EACvC;EACA,IAAI,OAAOuC,KAAK,KAAK,QAAQ,IAAI,CAAC,CAACA,KAAK,IAAI,CAAClD,WAAW,CAACkD,KAAK,CAAC,IAAI,CAACpD,IAAI,CAACoD,KAAK,CAAC,EAAE;IAC7E,OAAOmB,UAAU,GAAG,QAAQ,GAAGpC,SAAS,CAACuC,IAAI,CAACC,SAAS,CAACvB,KAAK,CAAC,CAAC;EACnE;EACA;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIA,KAAK,CAACwB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAIxB,KAAK,CAACwB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;MAC1D,OAAOL,UAAU,GAAG,QAAQ,GAAGV,WAAW,CAACT,KAAK,CAAC;IACrD,CAAC,MACI,IAAIA,KAAK,CAACwB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAIxB,KAAK,CAACwB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC7D,OAAOL,UAAU,GAAG,OAAO,GAAGnB,KAAK;IACvC,CAAC,MACI,IAAI,CAACU,QAAQ,CAACV,KAAK,CAAC,EAAE;MACvB,OAAOmB,UAAU,GAAG,QAAQ,GAAGpC,SAAS,CAACiB,KAAK,CAAC;IACnD;EACJ;EACA,OAAOmB,UAAU,GAAInB,KAAK,GAAG,CAAC,GAAG,QAAQ,GAAG,SAAS,GAAIS,WAAW,CAACT,KAAK,CAAC;AAC/E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIP,WAAW,GAAG,SAAAA,CAAUP,GAAG,EAAE;EAC7B,OAAQ,CAAC,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,QAAQ,KAAK,oBAAoB,CAACtB,IAAI,CAACsB,GAAG,CAAC;AAClG,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIuC,KAAK,GAAG,SAAAA,CAAUvC,GAAG,EAAE;EACvB,OAAQ,CAAC,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,QAAQ,KAAK,uBAAuB,CAACtB,IAAI,CAACsB,GAAG,CAAC;AACrG,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIwC,cAAc,GAAG,SAAAA,CAAU1C,GAAG,EAAE;EAChC,IAAIA,GAAG,KAAK,CAAC,IAAIyC,KAAK,CAACzC,GAAG,CAAC,EACvB,OAAOA,GAAG,CAAClB,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;EACxC,OAAOkB,GAAG;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI2C,OAAO,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC3B,OAAOjF,oBAAoB,CAACgF,OAAO,CAACC,KAAK,CAAC;AAC9C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,4BAA4B,GAAG,SAAAA,CAAUD,KAAK,EAAEE,eAAe,EAAE;EACjE,OAAOnF,oBAAoB,CAACkF,4BAA4B,CAACD,KAAK,EAAEE,eAAe,CAAC;AACpF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,wBAAwB,GAAG,SAAAA,CAAUH,KAAK,EAAEI,eAAe,EAAE;EAC7D,OAAOrF,oBAAoB,CAACoF,wBAAwB,CAACH,KAAK,EAAEI,eAAe,CAAC;AAChF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC3B,OAAOvF,oBAAoB,CAACsF,OAAO,CAACC,KAAK,CAAC;AAC9C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,SAAAA,CAAUP,KAAK,EAAEM,KAAK,EAAE;EACzC,OAAOvF,oBAAoB,CAACwF,cAAc,CAACP,KAAK,EAAEM,KAAK,CAAC;AAC5D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,SAAS,GAAG,SAAAA,CAAUR,KAAK,EAAEM,KAAK,EAAE;EACpC,OAAOvF,oBAAoB,CAACyF,SAAS,CAACR,KAAK,EAAEM,KAAK,CAAC;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,WAAW,GAAG,oEAAoE;AACtF,IAAIrE,IAAI,GAAG,SAAAA,CAAUgC,KAAK,EAAE;EACxB,IAAIpD,IAAI,CAACoD,KAAK,CAAC,EAAE;IACbA,KAAK,GAAGA,KAAK,CAACvC,QAAQ,EAAE;EAC5B;EACA,IAAIgC,WAAW,CAACO,KAAK,CAAC,IAAI,MAAM,CAACpC,IAAI,CAAEoC,KAAK,CAAEvC,QAAQ,EAAE,CAAC,EAAE;IACvDuC,KAAK,GAAGtD,cAAc,CAAC4F,QAAQ,CAACtC,KAAK,CAAC;EAC1C,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAChC;IACAA,KAAK,GAAGoB,MAAM,CAACmB,IAAI,CAACvC,KAAK,EAAE,OAAO,CAAC;EACvC;EACA,IAAIwC,WAAW,GAAG9F,cAAc,CAAC+F,WAAW,CAAC/F,cAAc,CAACgG,SAAS,CAAC1C,KAAK,CAAC,CAAC;EAC7E,IAAIwC,WAAW,KAAKH,WAAW,EAAE;IAC7B,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAOG,WAAW;EACtB;AACJ,CAAC;AACD;AACAxE,IAAI,CAAC2E,KAAK,GAAGjG,cAAc,CAACgG,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,OAAO,GAAG,SAAAA,CAAU5C,KAAK,EAAE;EAC3BA,KAAK,GAAGhC,IAAI,CAACgC,KAAK,CAAC;EACnB,IAAIA,KAAK,KAAK,IAAI,EAAE;IAChB,OAAOqC,WAAW;EACtB;EACA,OAAOrC,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIO,QAAQ,GAAG,SAAAA,CAAUP,KAAK,EAA4B;EAAA,IAA1BC,gBAAgB,GAAA7C,SAAA,CAAAuB,MAAA,QAAAvB,SAAA,QAAA8C,SAAA,GAAA9C,SAAA,MAAG,KAAK;EACpD,OAAO,OAAO4C,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGD,WAAW,CAACmB,KAAK,CAAClB,KAAK,CAAC,EAAEC,gBAAgB,CAAC;AAC1F,CAAC;AACD;AACA,IAAI4C,SAAS,GAAG,SAAAA,CAAU7C,KAAK,EAAE;EAC7B;EACA,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIA,KAAK,CAAC8C,QAAQ,CAAC,IAAI,CAAC,EAAE;IAClD,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGhD,KAAK,CAACiD,iBAAiB,EAAE,CAACC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAElD,KAAK,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAEK,KAAK,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;IACrH,OAAO,IAAIrD,EAAE,CAACyG,QAAQ,GAAGC,QAAQ,EAAE,EAAE,CAAC;EAC1C,CAAC,MACI;IACD,OAAO,IAAI1G,EAAE,CAAC0D,KAAK,CAAC;EACxB;AACJ,CAAC;AACDmD,MAAM,CAACC,cAAc,CAACP,SAAS,EAAEvG,EAAE,CAAC;AACpC6G,MAAM,CAACC,cAAc,CAACP,SAAS,CAACQ,SAAS,EAAE/G,EAAE,CAAC+G,SAAS,CAAC;AACxDC,MAAM,CAACC,OAAO,GAAG;EACbjH,EAAE,EAAEuG,SAAS;EACbjG,IAAI,EAAEA,IAAI;EACVE,WAAW,EAAEA,WAAW;EACxBG,IAAI,EAAEA,IAAI;EACVS,SAAS,EAAEA,SAAS;EACpBiE,OAAO,EAAEA,OAAO;EAChBE,4BAA4B,EAAEA,4BAA4B;EAC1DE,wBAAwB,EAAEA,wBAAwB;EAClDE,OAAO,EAAEA,OAAO;EAChBE,cAAc,EAAEA,cAAc;EAC9BC,SAAS,EAAEA,SAAS;EACpBvE,oBAAoB,EAAEA,oBAAoB;EAC1CkB,SAAS,EAAEA,SAAS;EACpBS,SAAS,EAAEA,SAAS;EACpBO,WAAW,EAAEA,WAAW;EACxBS,iBAAiB,EAAEA,iBAAiB;EACpCC,WAAW,EAAEA,WAAW;EACxBS,KAAK,EAAEA,KAAK;EACZF,UAAU,EAAEA,UAAU;EACtBH,UAAU,EAAEA,UAAU;EACtBY,KAAK,EAAEA,KAAK;EACZhC,WAAW,EAAEA,WAAW;EACxBiC,cAAc,EAAEA,cAAc;EAC9BrD,OAAO,EAAEA,OAAO;EAChBS,QAAQ,EAAEA,QAAQ;EAClBvB,gBAAgB,EAAEA,gBAAgB;EAClCS,IAAI,EAAEA,IAAI;EACV4E,OAAO,EAAEA,OAAO;EAChBrC,QAAQ,EAAEA;AACd,CAAC"},"metadata":{},"sourceType":"script"}