[{"C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\index.js":"1","C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\App.js":"2","C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\reportWebVitals.js":"3","C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\HelloWorld.js":"4","C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\util\\interact.js":"5"},{"size":517,"mtime":1680987932971,"results":"6","hashOfConfig":"7"},{"size":194,"mtime":1680987932969,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1680987932972,"results":"9","hashOfConfig":"7"},{"size":2466,"mtime":1680992988468,"results":"10","hashOfConfig":"7"},{"size":2898,"mtime":1680992936284,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3ha68c",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\index.js",[],"C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\App.js",[],"C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\reportWebVitals.js",[],"C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\HelloWorld.js",["24","25","26","27","28","29","30","31","32","33"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  loadCurrentMessage,\r\n  getCurrentVoterConnected,\r\n  connectToEthChain,\r\n  \r\n} from \"./util/interact.js\";\r\n\r\n\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [voteAddress, setVote] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    const message = await loadCurrentMessage();\r\n    setMessage(message);\r\n    addSmartContractListener();\r\n\r\n    const { address, status } = await getCurrentVoterConnected();\r\n    setVote(address);\r\n    setStatus(status);\r\n  }, []);\r\n\r\n  function addSmartContractListener() {\r\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) { setStatus(error.message); }\r\n      else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"Message updated.\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function addWalletListener() { //TODO: implement\r\n    \r\n  }\r\n\r\n  const connectVotingPressed = async () => { //TODO: implement\r\n    const votingResponse = await connectToEthChain();\r\n    setStatus(votingResponse.status);\r\n    setVote(votingResponse.address);\r\n  };\r\n\r\n  const onUpdatePressed = async () => { //TODO: implement\r\n    \r\n  };\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo}></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;","C:\\Users\\jack\\git\\hackathon\\starter-files\\src\\util\\interact.js",["34"],"require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require('@alch/alchemy-web3');\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contact(\r\n    contractABI,\r\n    contractAddress\r\n);\r\n\r\nexport const loadCurrentMessage = async () => { \r\n  const message = await helloWorldContract.methods.message().call();\r\n  return message;\r\n};\r\n\r\nexport const connectToEthChain = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n              method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n              status: \"👆🏽 Write a message in the text-field above.\",\r\n              address: addressArray[0],\r\n            };\r\n            return obj;\r\n          } catch (err) {\r\n            return {\r\n              address: \"\",\r\n              status: err.message,\r\n            };\r\n          }\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"\",\r\n        }\r\n    }\r\n};\r\n\r\nexport const validateVoter = async () => {\r\n    const video = document.querySelector('video');\r\n    const constraints = { video: true };\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n        .then(stream => {\r\n            video.srcObject = stream;\r\n            video.play();\r\n        })\r\n        .catch(err => {\r\n            console.error('Error accessing camera:', err);\r\n        });\r\n    const canvas = document.querySelector('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const scanButton = document.querySelector('#verify-button'); // Need to add scan/verify button\r\n    scanButton.addEventListener('click', () => {\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        /* Process image */\r\n    });\r\n};\r\n\r\nexport const getCurrentVoterConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n          const addressArray = await window.ethereum.request({\r\n            method: \"eth_accounts\",\r\n          });\r\n          if (addressArray.length > 0) {\r\n            return {\r\n              address: addressArray[0],\r\n              status: \"👆🏽 Write a message in the text-field above.\",\r\n            };\r\n          } else {\r\n            return {\r\n              address: \"\",\r\n              status: \"\",\r\n            };\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            address: \"\",\r\n            status: err.message,\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"\",\r\n        }\r\n      }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n  \r\n};",{"ruleId":"35","severity":1,"message":"36","line":15,"column":10,"nodeType":"37","messageId":"38","endLine":15,"endColumn":21},{"ruleId":"39","severity":1,"message":"40","line":21,"column":13,"nodeType":"41","endLine":29,"endColumn":4},{"ruleId":"35","severity":1,"message":"42","line":42,"column":12,"nodeType":"37","messageId":"38","endLine":42,"endColumn":29},{"ruleId":"35","severity":1,"message":"43","line":46,"column":9,"nodeType":"37","messageId":"38","endLine":46,"endColumn":29},{"ruleId":"44","severity":1,"message":"45","line":59,"column":7,"nodeType":"46","endLine":59,"endColumn":40},{"ruleId":"47","severity":2,"message":"48","line":59,"column":27,"nodeType":"37","messageId":"49","endLine":59,"endColumn":38},{"ruleId":"47","severity":2,"message":"50","line":60,"column":42,"nodeType":"37","messageId":"49","endLine":60,"endColumn":62},{"ruleId":"47","severity":2,"message":"51","line":61,"column":10,"nodeType":"37","messageId":"49","endLine":61,"endColumn":23},{"ruleId":"47","severity":2,"message":"51","line":63,"column":18,"nodeType":"37","messageId":"49","endLine":63,"endColumn":31},{"ruleId":"47","severity":2,"message":"51","line":65,"column":18,"nodeType":"37","messageId":"49","endLine":65,"endColumn":31},{"ruleId":"35","severity":1,"message":"52","line":60,"column":15,"nodeType":"37","messageId":"38","endLine":60,"endColumn":24},"no-unused-vars","'voteAddress' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'addWalletListener' is defined but never used.","'connectVotingPressed' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-undef","'alchemylogo' is not defined.","undef","'connectWalletPressed' is not defined.","'walletAddress' is not defined.","'imageData' is assigned a value but never used."]